git submodule add https://github.com/shahdqutp89/Development devolpment        #to add a submodule repo to the main repo
git submodule update --init --recursive                                        #To initialize and update submodules
git submodule update --remote                                                  #To update submodules to the latest version
git submodule update --remote --merge                                          #Update submodules
git pull origin main branchname                                                #To pull latest changes
git push origin main branchname                                                #To push your commits
git checkout -b branchname                                                     #create and switch to a new branch
git checkout main                                                              #switch back to main branch
git merge branchname                                                           #merging the main branch with another branch (but make sure that you are in the main branch when writing this command)
git rebase -i HEAD~3                                                           #squash last 3 commits into one
git branch                                                                     # Lists all local branches
git branch -d <branch-name>                                                    # Deletes the branch after it's merged
git branch -D <branch-name>                                                    # Force deletes the branch (even if not merged)
git branch -m <new-branch-name>                                                # Renames the current branch
git add <conflicted-file>                                                      # Mark file as resolved
git commit                                                                     # Complete the merge
git rebase main                                                                #Rebase the newbranch onto the main branch
git rebase --skip                                                              # Skip the current commit and continue rebasing

# Fix conflicts in the files manually
git add <resolved-file>                                                        # Stage the resolved file
git rebase --continue                                                          # Continue the rebase process

git rebase --abort                                                             # Abort the rebase process and return to the state before starting the rebase
git push --force                                                               # Push with force (because history was rewritten)



##########################################
# ðŸ“˜ Git: Merge vs Rebase (Comparison)
##########################################

# MERGE:
# - Combines branches and preserves the full history.
# - Creates a new "merge commit".
# - Easier for teams, as it keeps the timeline clear.

# Example:
git checkout main
git merge feature-branch  # Creates a merge commit

# REBASE:
# - Rewrites the commit history to make it linear.
# - Avoids merge commits.
# - Useful for a clean, linear history (especially before pushing).

# Example:
git checkout feature-branch
git rebase main  # Rewrites the base of feature-branch to latest main
